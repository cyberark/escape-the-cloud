AWSTemplateFormatVersion: 2010-09-09
Resources:
  TeamRole:
    Type: 'AWS::IAM::Role'
    Properties: 
      RoleName: TeamRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - quicksight.amazonaws.com
                - sagemaker.amazonaws.com
                - amplify.amazonaws.com
                - robomaker.amazonaws.com
                - ecs-tasks.amazonaws.com
                - cloudtrail.amazonaws.com
                - cloud9.amazonaws.com
                - codecommit.amazonaws.com
                - lambda.amazonaws.com
                - ec2.amazonaws.com
                - glue.amazonaws.com
                - cloudformation.amazonaws.com
                - ecs.amazonaws.com
                - eks.amazonaws.com
                - cloudwatch.amazonaws.com
                - dynamodb.amazonaws.com
                - rds.amazonaws.com
                - deepracer.amazonaws.com
            Action:
              - 'sts:AssumeRole'
  BasicTeamRolePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: BasicTeamRolePolicy
      Roles:
        - !Ref TeamRole
      Groups:
        - !Ref ChallengeGroup
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: OverlyPermissivePolicy
            Effect: Allow
            Action:
              - athena:*
              - apigateway:*
              - appmesh:*
              - amplify:*
              - application-autoscaling:*
              - autoscaling:*
              - cloud9:*
              - cloudformation:*
              - cloudfront:*
              - cloudtrail:*
              - cloudwatch:*
              - codebuild:*
              - codecommit:*
              - codedeploy:*
              - codepipeline:*
              - codestar:*
              - cognito-identity:*
              - cognito-idp:*
              - cognito-sync:*
              - comprehendmedical:*
              - comprehend:*
              - config:*
              - dynamodb:*
              - ec2messages:*
              - ecr:*
              - ecs:*
              - eks:*
              - elasticmapreduce:*
              - elasticbeanstalk:*
              - elasticloadbalancing:*
              - es:*
              - events:*
              - firehose:*
              - glue:*
              - greengrass:*
              - iam:CreateServiceLinkedRole
              - iam:Generate*
              - iam:Get*
              - iam:List*
              - iam:ListRoles
              - iot:*
              - iotanalytics:*
              - iotevents:*
              - kinesis:*
              - kinesisanalytics:*
              - kms:*
              - lambda:*
              - logs:*
              - medialive:*
              - mediapackage:*
              - rds:*
              - redshift:*
              - resource-groups:*
              - s3:*
              - sagemaker:*
              - sns:*
              - sqs:*
              - ssm:*
              - ssmmessages:*
              - states:*
              - tag:*
              - translate:*
              - waf:*
              - xray:*
              - deepracer:*
              - robomaker:*
            Resource: '*'
          - Sid: DenyXXLInstances
            Effect: Deny
            Action: ec2:RunInstances
            Resource:
              - arn:aws:ec2:*:*:instance/*
            Condition:
              StringLike:
                ec2:InstanceType:
                  - "*6xlarge"
                  - "*8xlarge"
                  - "*10xlarge"
                  - "*12xlarge"
                  - "*16xlarge"
                  - "*18xlarge"
                  - "*24xlarge"
                  - f1.4xlarge
                  - x1*
                  - z1*
                  - "*metal"
          - Sid: AllowAllOtherEC2ActionsExceptSpotAndReserved
            Effect: Allow
            Action:
              - ec2:Accept*
              - ec2:Allocate*
              - ec2:Assign*
              - ec2:Associate*
              - ec2:Attach*
              - ec2:Authorize*
              - ec2:Bundle*
              - ec2:Cancel*
              - ec2:Confirm*
              - ec2:Copy*
              - ec2:Create*
              - ec2:Delete*
              - ec2:Deregister*
              - ec2:Describe*
              - ec2:Detach*
              - ec2:Disable*
              - ec2:Disassociate*
              - ec2:Enable*
              - ec2:Get*
              - ec2:Import*
              - ec2:Modify*
              - ec2:Monitor*
              - ec2:Move*
              - ec2:Reboot*
              - ec2:Register*
              - ec2:Reject*
              - ec2:Release*
              - ec2:Replace*
              - ec2:Report*
              - ec2:Reset*
              - ec2:Restore*
              - ec2:Revoke*
              - ec2:Run*
              - ec2:Start*
              - ec2:Stop*
              - ec2:Terminate*
              - ec2:Unassign*
              - ec2:Unmonitor*
              - ec2:Search*
            Resource: "*"
          - Sid: DontBuyReservationsOrSpotPlz
            Effect: Deny
            Action:
              - ec2:ModifyReservedInstances
              - ec2:PurchaseHostReservation
              - ec2:PurchaseReservedInstancesOffering
              - ec2:PurchaseScheduledInstances
              - rds:PurchaseReservedDBInstancesOffering
              - dynamodb:PurchaseReservedCapacityOfferings
              - ec2:CancelSpotFleetRequests
              - ec2:ModifySpotFleetRequest
              - ec2:RequestSpotFleet
              - ec2:RequestSpotInstances
              - ec2:CancelSpotInstanceRequests
              - ec2:CreateSpotDatafeedSubscription
              - ec2:DeleteSpotDatafeedSubscription
            Resource: "*"
          - Sid: PassRole
            Effect: Allow
            Action: iam:PassRole
            Resource:
              - !Sub
                - 'arn:aws:iam::${AccountId}:role/${TeamRole}'
                - { AccountId: !Ref 'AWS::AccountId', TeamRole: !Ref TeamRole }
  RestrictTeamRolePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: RestrictTeamRolePolicy
      Roles:
        - !Ref TeamRole
      Groups:
        - !Ref ChallengeGroup
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowIAMRO
            Effect: Allow
            Action:
              - iam:List*
              - iam:Get*
              - iam:Generate*
              - sts:GetCallerIdentity
            Resource: "*"
          - Effect: Allow
            Action: iam:CreateServiceLinkedRole
            Resource: arn:aws:iam::*:role/aws-service-role/*
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource:
              - !Sub
                - 'arn:aws:iam::${AccountId}:role/${TeamRole}'
                - { AccountId: !Ref 'AWS::AccountId', TeamRole: !Ref TeamRole }
          - Sid: DenyBlacklist
            Effect: Deny
            Action:
              - route53domains:*
              - ec2:ModifyReservedInstances
              - ec2:PurchaseHostReservation
              - ec2:PurchaseReservedInstancesOffering
              - ec2:PurchaseScheduledInstances
              - rds:PurchaseReservedDBInstancesOffering
              - dynamodb:PurchaseReservedCapacityOfferings
              - s3:PutObjectRetention
              - s3:PutObjectLegalHold
              - s3:BypassGovernanceRetention
              - s3:PutBucketObjectLockConfiguration
            Resource: "*"
          - Sid: DenyAllOutsideTargetRegion
            Effect: Deny
            NotAction:
              - iam:*
              - sts:*
              - s3:*
              - ds:*
              - quicksight:*
              - cloudfront:*
              - route53:*
              - servicediscovery:*
              - waf:*
              - waf-regional:*
              - cloudwatch:DescribeAlarms
              - cloudwatch:PutMetricAlarm
              - cloudwatch:DeleteAlarms
              - cloudwatch:GetMetricStatistics
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - ecr:BatchCheckLayerAvailability
              - ecr:GetAuthorizationToken
              - globalaccelerator:*
              - acm:List*
              - acm:Describe*
              - kms:Describe*
              - kms:ReEncrypt*
              - kms:Get*
              - kms:List*
              - kms:CreateGrant
              - kms:RevokeGrant
            Resource: "*"
            Condition:
              StringNotEquals:
                aws:RequestedRegion:
                - eu-west-1
  ChallengeGroup:
    Type: AWS::IAM::Group
    Properties: 
      GroupName: ChallengeGroup
  ChallengeUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !Ref ChallengeUserName
      LoginProfile:
        Password: !Ref ChallengeUserPassword
      Groups:
        - !Ref ChallengeGroup
Parameters:
  ChallengeUserName:
    Description: Name for the created challenge user.
    Type: String
    MinLength: 1
    MaxLength: 41
    AllowedPattern: ^[a-zA-Z0-9_.-]*$
    ConstraintDescription: must include letters and numbers only.
  ChallengeUserPassword:
    Description: Password for the created challenge user. Must be compatible with account password policy.
    Type: String
    NoEcho: true
    MinLength: 1
    MaxLength: 24
Metadata:
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: "User Configuration"
        Parameters: 
          - ChallengeUserName
          - ChallengeUserPassword
    ParameterLabels: 
      ChallengeUserName: 
        default: "Username"
      ChallengeUserPassword: 
        default: "Password"
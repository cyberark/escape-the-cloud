{
   "AWSTemplateFormatVersion": "2010-09-09",
   "Resources": {
      "S3Secret": {
         "Type": "AWS::CloudFormation::CustomResource",
         "Properties": {
            "ServiceName": "S3",
            "UserName": {
               "Ref": "UserID"
            },
            "ServiceToken": {
               "Fn::GetAtt": [
                  "SecretGeneratorFunction",
                  "Arn"
               ]
            }
         }
      },
      "S3ChallengeBucket": {
         "Type": "AWS::S3::Bucket",
         "Properties": {
            "AccessControl": "PublicRead",
            "BucketName": {
               "Fn::Sub": "${AWS::StackName}-${UserID}-challenge-sample-${AWS::AccountId}"
            },
            "WebsiteConfiguration": {
               "ErrorDocument": "error.html",
               "IndexDocument": "index.html"
            }
         }
      },
      "S3ChallengeBucketBootstrapPolicy": {
         "Type": "AWS::S3::BucketPolicy",
         "Properties": {
            "Bucket": {
               "Fn::Sub": "${AWS::StackName}-${UserID}-challenge-sample-${AWS::AccountId}"
            },
            "PolicyDocument": {
               "Version": "2012-10-17",
               "Statement": [
                  {
                     "Effect": "Allow",
                     "Principal": "*",
                     "Action": "s3:PutObject",
                     "Resource": {
                        "Fn::Sub": "arn:aws:s3:::${AWS::StackName}-${UserID}-challenge-sample-${AWS::AccountId}/*"
                     }
                  }
               ]
            }
         },
         "DependsOn": [
            "S3ChallengeBucket"
         ]
      },
      "S3ChallengeBucketPolicy": {
         "Type": "AWS::S3::BucketPolicy",
         "Properties": {
            "Bucket": {
               "Fn::Sub": "${AWS::StackName}-${UserID}-challenge-sample-${AWS::AccountId}"
            },
            "PolicyDocument": {
               "Version": "2012-10-17",
               "Statement": [
                  {
                     "Effect": "Allow",
                     "Principal": "*",
                     "Action": "s3:GetObject",
                     "Resource": {
                        "Fn::Sub": "arn:aws:s3:::${AWS::StackName}-${UserID}-challenge-sample-${AWS::AccountId}/*"
                     }
                  },
                  {
                     "Effect": "Deny",
                     "Principal": "*",
                     "Action": "s3:GetObject",
                     "Resource": {
                        "Fn::Sub": "arn:aws:s3:::${AWS::StackName}-${UserID}-challenge-sample-${AWS::AccountId}/index.html"
                     }
                  }
               ]
            }
         },
         "DependsOn": [
            "InvokeS3ChallengeCreateObjects"
         ]
      },
      "S3ChallengeCreateObjects": {
         "Type": "AWS::Lambda::Function",
         "Properties": {
            "Description": "Creates initial html files for website",
            "Code": {
               "ZipFile": {
                  "Fn::Join": [
                     "\n",
                     [
                        "import boto3",
                        "import cfnresponse",
                        "import base64",
                        "import random",
                        "import string",
                        "import json",
                        "",
                        "def randomStringDigits(stringLength=6):",
                        "    lettersAndDigits = string.ascii_letters + string.digits",
                        "    return ''.join(random.choice(lettersAndDigits) for i in range(stringLength))",
                        "",
                        "def encrypt(text, key):",
                        "    enc = []",
                        "    for i in range(len(text)):",
                        "        key_c = key[i % len(key)]",
                        "        enc_c = chr((ord(text[i]) + ord(key_c)) % 256)",
                        "        enc.append(enc_c)",
                        "    return base64.urlsafe_b64encode(\"\".join(enc))",
                        "",
                        "def createS3Object(bucketName, Key, Body):",
                        "    s3client = boto3.client('s3')",
                        "    return s3client.put_object(",
                        "        ACL='public-read',",
                        "        Key=Key,",
                        "        Body=Body,",
                        "        Bucket=bucketName,",
                        "        ContentType = 'text/html',",
                        "        CacheControl='max-age=5'",
                        "    )",
                        "",
                        "def emptyBucket(bucketName):",
                        "    s3resource = boto3.resource('s3')",
                        "    bucket = s3resource.Bucket(bucketName)",
                        "    bucket.objects.all().delete()",
                        "",
                        "def createJsonForLambda(DBpassword, LambdaSecret):",
                        "    secretKey= randomStringDigits(32)",
                        "    passwordKey= randomStringDigits(32)",
                        "    encDBPassword = encrypt(DBpassword, passwordKey)",
                        "    encLambdaSecret = encrypt(LambdaSecret, secretKey)",
                        "    res = {}",
                        "    res['secretKey'] = secretKey",
                        "    res['passwordKey'] = passwordKey",
                        "    res['DBpassword'] = encDBPassword",
                        "    res['LambdaSecret'] = encLambdaSecret",
                        "    return json.dumps(res)",
                        "",
                        "def createIndexHtml(bucketName, secret, json_object_for_lambda):",
                        "    Body=b'<html><head><title>Success!</title></head><body><h1>Good Job!</h1><p>You finally released the document. Your secret is: '+secret+'</p><p>Also, you can use the next hint to help you with your next mission: '+json_object_for_lambda+'</p></body></html>'",
                        "    return createS3Object(bucketName=bucketName, Key='index.html', Body=Body)",
                        "",
                        "def createErrorHtml(bucketName):",
                        "    Body=b'<html><head><title>Access Denied</title></head><body><h1>The object you are looking for is protected</h1><p>Why not trying to investigate <a href=\"https://s3.console.aws.amazon.com/s3/buckets/'+bucketName+'/?tab=overview\" target=\"_blank\">the bucket itself?</a></p></body></html>'",
                        "    return createS3Object(bucketName=bucketName, Key='error.html', Body=Body)",
                        "",
                        "def lambda_handler(event, context):",
                        "",
                        "    try:",
                        "        if event['RequestType'] == 'Create':",
                        "            json_object_for_lambda = createJsonForLambda(event['ResourceProperties']['DBpassword'], event['ResourceProperties']['LambdaSecret'])",
                        "            createIndexHtml(event['ResourceProperties']['bucketName'], event['ResourceProperties']['secret'], json_object_for_lambda)",
                        "            createErrorHtml(event['ResourceProperties']['bucketName'])",
                        "            return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, 0)",
                        "        if event['RequestType'] == 'Delete':",
                        "            emptyBucket(event['ResourceProperties']['bucketName'])",
                        "            return cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, 0)",
                        "",
                        "    except Exception as E:",
                        "        print E",
                        "        return cfnresponse.send(event, context, cfnresponse.FAILED, {}, 0)"
                     ]
                  ]
               }
            },
            "Runtime": "python2.7",
            "Handler": "index.lambda_handler",
            "Role": {
               "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/TeamRole"
            }
         },
         "DependsOn": [
            "S3ChallengeBucket"
         ]
      },
      "InvokeS3ChallengeCreateObjects": {
         "Type": "AWS::CloudFormation::CustomResource",
         "Properties": {
            "ServiceToken": {
               "Fn::GetAtt": [
                  "S3ChallengeCreateObjects",
                  "Arn"
               ]
            },
            "bucketName": {
               "Fn::Sub": "${AWS::StackName}-${UserID}-challenge-sample-${AWS::AccountId}"
            },
            "secret": {
               "Fn::GetAtt": [
                  "S3Secret",
                  "Secret"
               ]
            },
            "DBpassword": {
               "Fn::GetAtt": [
                  "DBPassword",
                  "Secret"
               ]
            },
            "LambdaSecret": {
               "Fn::GetAtt": [
                  "LambdaSecret",
                  "Secret"
               ]
            }
         },
         "DependsOn": [
            "S3ChallengeCreateObjects",
            "S3ChallengeBucket",
            "DBPassword",
            "LambdaSecret"
         ]
      },
      "LambdaSecret": {
         "Type": "AWS::CloudFormation::CustomResource",
         "Properties": {
            "ServiceName": "Lambda",
            "UserName": {
               "Ref": "UserID"
            },
            "ServiceToken": {
               "Fn::GetAtt": [
                  "SecretGeneratorFunction",
                  "Arn"
               ]
            }
         }
      },
      "LambdaChallenge": {
         "Type": "AWS::Lambda::Function",
         "Properties": {
            "Description": "Lambda Challenge",
            "Code": {
               "ZipFile": {
                  "Fn::Join": [
                     "\n",
                     [
                        "import base64",
                        "import string",
                        "import json",
                        "",
                        "def decrypt(enc, key):",
                        "    dec = []",
                        "    enc = base64.urlsafe_b64decode(str(enc))",
                        "    for i in range(len(enc)):",
                        "        key_c = key[i % len(key)]",
                        "        dec_c = chr((256 + ord(enc[i]) - ord(key_c)) % 256)",
                        "        dec.append(dec_c)",
                        "    return \"\".join(dec)",
                        "",
                        "def decryptSecret(secret, Key):",
                        "    return decrypt(secret, Key)",
                        "",
                        "def decryptPassword(password, Key):",
                        "    return decrypt(secret, Key)",
                        "",
                        "def lambda_handler(event, context):",
                        "    print(\"######################################\")",
                        "    print(\"# Secret: \"+decryptSecret(event['LambdaSecret'], event['secretKey']))",
                        "    print(\"# DBPassword: \"+decryptPassword(event['DBpassword'], event['passwordKey']))",
                        "    print(\"######################################\")"
                     ]
                  ]
               }
            },
            "Runtime": "python2.7",
            "Handler": "index.lambda_handler",
            "Role": {
               "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/TeamRole"
            }
         }
      },
      "RDSSecret": {
         "Type": "AWS::CloudFormation::CustomResource",
         "Properties": {
            "ServiceName": "RDS",
            "UserName": {
               "Ref": "UserID"
            },
            "ServiceToken": {
               "Fn::GetAtt": [
                  "SecretGeneratorFunction",
                  "Arn"
               ]
            }
         }
      },
      "EC2Secret": {
         "Type": "AWS::CloudFormation::CustomResource",
         "Properties": {
            "ServiceName": "EC2",
            "UserName": {
               "Ref": "UserID"
            },
            "ServiceToken": {
               "Fn::GetAtt": [
                  "SecretGeneratorFunction",
                  "Arn"
               ]
            }
         }
      },
      "SecretGeneratorFunction": {
         "Type": "AWS::Lambda::Function",
         "Properties": {
            "Code": {
               "ZipFile": "const response = require(\"cfn-response\");\nconst crypto = require(\"crypto\");\nexports.handler = (event, context) =>{\n\n  var data = event['ResourceProperties']['ServiceName'] + event['ResourceProperties']['UserName'];\n var str = crypto.createHash('md5').update(data).digest(\"hex\");\n  const responseData = {Secret: str};\n  response.send(event, context, response.SUCCESS, responseData);\n\n};\n"
            },
            "Handler": "index.handler",
            "Runtime": "nodejs12.x",
            "Role": {
               "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/TeamRole"
            },
            "MemorySize": 128,
            "Timeout": 20
         }
      },
      "AddUserToDynamoDBFunction": {
         "Type": "AWS::Lambda::Function",
         "DependsOn": [
            "S3Secret",
            "S3ChallengeBucket",
            "LambdaSecret",
            "LambdaChallenge",
            "RDSSecret",
            "ChallengeDB",
            "EC2Secret",
            "ChallengeMachine"
         ],
         "Properties": {
            "Handler": "index.handler",
            "Role": {
               "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/TeamRole"
            },
            "Code": {
               "ZipFile": {
                  "Fn::Join": [
                     "\n",
                     [
                        "const response = require('cfn-response');",
                        "const https = require('https');",
                        "const apiHost = process.env.API_HOST;",
                        "const apiToken = process.env.API_TOKEN;",
                        "exports.handler = (event, context, callback) => {",
                        "  if (event.RequestType === 'Create') {",
                        "    const options = {",
                        "      hostname: apiHost,",
                        "      port: 443,",
                        "      path: '/prod/users',",
                        "      method: 'PUT',",
                        "      headers: {",
                        "        'Content-Type': 'application/json',",
                        "        'x-api-key': apiToken",
                        "      }",
                        "    }",
                        "    const req = https.request(options, (res) => {",
                        "      res.on('data', (d) => {",
                        "        process.stdout.write(d)",
                        "      });",
                        "      // The whole response has been received. Print out the result.",
                        "      res.on('end', (data) => {",
                        "        response.send(event, context, response.SUCCESS);",
                        "      });",
                        "    })",
                        "    var post_data = JSON.stringify({",
                        "      'userId': event.ResourceProperties.UserID,",
                        "      'schemaObj': event.ResourceProperties.SchemaObj",
                        "    });",
                        "    req.write(post_data);",
                        "    req.on('error', (error) => {",
                        "      response.send(event, context, response.FAILED);",
                        "      console.error(error)",
                        "    })",
                        "    req.end()",
                        "  } else {",
                        "    response.send(event, context, response.SUCCESS);",
                        "  }",
                        "};"
                     ]
                  ]
               }
            },
            "Environment": {
               "Variables": {
                  "API_HOST": { "Ref": "ApiHost" },
                  "API_TOKEN": { "Ref": "ApiToken" }
               }
            },
            "Runtime": "nodejs12.x",
            "Timeout": 25,
            "TracingConfig": {
               "Mode": "Active"
            }
         }
      },
      "InvokeAddUserToDynamoDB": {
         "Type": "AWS::CloudFormation::CustomResource",
         "DependsOn": "AddUserToDynamoDBFunction",
         "Properties": {
            "ServiceToken": {
               "Fn::GetAtt": [
                  "AddUserToDynamoDBFunction",
                  "Arn"
               ]
            },
            "UserID": {
               "Ref": "UserID"
            },
            "SchemaObj": {
               "task1": {
                  "secret": {
                     "Fn::GetAtt": [
                        "S3Secret",
                        "Secret"
                     ]
                  },
                  "link": {
                     "Fn::Join": [
                        "",
                        [
                           "http://",
                           {
                              "Ref": "S3ChallengeBucket"
                           },
                           ".s3-website-",
                           {
                              "Ref": "AWS::Region"
                           },
                           ".amazonaws.com"
                        ]
                     ]
                  }
               },
               "task2": {
                  "secret": {
                     "Fn::GetAtt": [
                        "LambdaSecret",
                        "Secret"
                     ]
                  },
                  "link": {
                     "Fn::Join": [
                        "",
                        [
                           "https://",
                           {
                              "Ref": "AWS::Region"
                           },
                           ".console.aws.amazon.com/lambda/home?region=",
                           {
                              "Ref": "AWS::Region"
                           },
                           "#/functions/",
                           {
                              "Ref": "LambdaChallenge"
                           }
                        ]
                     ]
                  }
               },
               "task3": {
                  "secret": {
                     "Fn::GetAtt": [
                        "RDSSecret",
                        "Secret"
                     ]
                  },
                  "link": {
                     "Fn::Join": [
                        "",
                        [
                           "https://",
                           {
                              "Ref": "AWS::Region"
                           },
                           ".console.aws.amazon.com/rds/home?region=",
                           {
                              "Ref": "AWS::Region"
                           },
                           "#database:id=",
                           {
                              "Ref": "ChallengeDB"
                           },
                           ";is-cluster=false"
                        ]
                     ]
                  }
               },
               "task4": {
                  "secret": {
                     "Fn::GetAtt": [
                        "EC2Secret",
                        "Secret"
                     ]
                  },
                  "link": {
                     "Fn::Join": [
                        "",
                        [
                           "https://",
                           {
                              "Ref": "AWS::Region"
                           },
                           ".console.aws.amazon.com/ec2/v2/home?region=",
                           {
                              "Ref": "AWS::Region"
                           },
                           "#Instances:instanceId=",
                           {
                              "Ref": "ChallengeMachine"
                           },
                           ";sort=desc:launchTime"
                        ]
                     ]
                  }
               }
            }
         }
      },
      "AMIInfo": {
         "Type": "Custom::AMIInfo",
         "Properties": {
            "ServiceToken": {
               "Fn::GetAtt": [
                  "AMIInfoFunction",
                  "Arn"
               ]
            },
            "Region": {
               "Ref": "AWS::Region"
            },
            "OSName": "Windows Server 2012 R2 English 64-bit"
         }
      },
      "AMIInfoFunction": {
         "Type": "AWS::Lambda::Function",
         "Properties": {
            "Code": {
               "S3Bucket": {
                  "Fn::FindInMap": [
                     "Configuration",
                     "CentralBucketName",
                     "Value"
                  ]
               },
               "S3Key": "amilookup-win.zip"
            },
            "Handler": "amilookup-win.handler",
            "Role": {
               "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/TeamRole"
            },
            "Runtime": "nodejs12.x",
            "Timeout": "30"
         }
      },
      "ConfigureDBFunction": {
         "Type": "AWS::Lambda::Function",
         "Properties": {
            "Handler": "index.handler",
            "Role": {
               "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/TeamRole"
            },
            "Code": {
               "S3Bucket": {
                  "Fn::FindInMap": [
                     "Configuration",
                     "CentralBucketName",
                     "Value"
                  ]
               },
               "S3Key": "ConfigureDBFunctionNew.zip"
            },
            "Environment": {
               "Variables": {
                  "DB_ID": {
                     "Ref": "ChallengeDB"
                  },
                  "DB_USER": "db_admin",
                  "DB_PASSWORD": {
                     "Fn::GetAtt": [
                        "DBPassword",
                        "Secret"
                     ]
                  },
                  "SSM_NAME": {
                     "Fn::Sub": "/${AWS::StackName}/challenge/private-key"
                  },
                  "SECRET_VALUE": {
                     "Fn::GetAtt": [
                        "RDSSecret",
                        "Secret"
                     ]
                  }
               }
            },
            "Runtime": "nodejs12.x",
            "Timeout": 25,
            "TracingConfig": {
               "Mode": "Active"
            }
         },
         "DependsOn": "ChallengeDB"
      },
      "InvokeConfigureDB": {
         "Type": "AWS::CloudFormation::CustomResource",
         "DependsOn": "ConfigureDBFunction",
         "Properties": {
            "ServiceToken": {
               "Fn::GetAtt": [
                  "ConfigureDBFunction",
                  "Arn"
               ]
            }
         }
      },
      "Key": {
         "Type": "AWS::KMS::Key",
         "Properties": {
            "Description": "used for encryption of secrets in CloudFormation templates",
            "Enabled": true,
            "EnableKeyRotation": true,
            "KeyPolicy": {
               "Version": "2012-10-17",
               "Id": "enable iam permissions",
               "Statement": [
                  {
                     "Sid": "Enable IAM User Permissions",
                     "Effect": "Allow",
                     "Principal": {
                        "AWS": {
                           "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:root"
                        }
                     },
                     "Action": "kms:*",
                     "Resource": "*"
                  }
               ]
            }
         }
      },
      "KeyAlias": {
         "Type": "AWS::KMS::Alias",
         "Properties": {
            "AliasName": {
               "Fn::Sub": "alias/${AWS::StackName}/cmk/cfn-secrets"
            },
            "TargetKeyId": {
               "Fn::GetAtt": [
                  "Key",
                  "Arn"
               ]
            }
         }
      },
      "CFNSecretProvider": {
         "Type": "AWS::Lambda::Function",
         "Properties": {
            "Description": "CloudFormation Custom:Secret implementation",
            "Code": {
               "S3Bucket": {
                  "Fn::FindInMap": [
                     "Configuration",
                     "CentralBucketName",
                     "Value"
                  ]
               },
               "S3Key": "cfn-secret-provider-0.13.3.zip"
            },
            "FunctionName": {
               "Fn::Sub": "${AWS::StackName}-SecretProvider"
            },
            "Handler": "secrets.handler",
            "MemorySize": 128,
            "Timeout": 30,
            "Role": {
               "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/TeamRole"
            },
            "Runtime": "python3.6"
         }
      },
      "DBPassword": {
         "Type": "Custom::Secret",
         "Properties": {
            "Name": {
               "Fn::Sub": "/${AWS::StackName}/challenge/DBPASSWORD"
            },
            "Alphabet": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
            "RefreshOnUpdate": false,
            "Length": 30,
            "ReturnSecret": true,
            "Version": "v2",
            "NoEcho": false,
            "ServiceToken": {
               "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-SecretProvider"
            }
         },
         "DependsOn": "CFNSecretProvider"
      },
      "PrivateKey": {
         "Type": "Custom::RSAKey",
         "Properties": {
            "Name": {
               "Fn::Sub": "/${AWS::StackName}/challenge/private-key"
            },
            "Version": "v1",
            "NoEcho": false,
            "ServiceToken": {
               "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-SecretProvider"
            },
            "KeyFormat": "TraditionalOpenSSL"
         },
         "DependsOn": "CFNSecretProvider"
      },
      "KeyPair": {
         "Type": "Custom::KeyPair",
         "DependsOn": "PrivateKey",
         "Properties": {
            "Name": {
               "Fn::Sub": "${AWS::StackName}-challenge-key-pair"
            },
            "NoEcho": false,
            "PublicKeyMaterial": {
               "Fn::GetAtt": [
                  "PrivateKey",
                  "PublicKey"
               ]
            },
            "ServiceToken": {
               "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-SecretProvider"
            }
         }
      },
      "RDSSecurityGroup": {
         "Type": "AWS::EC2::SecurityGroup",
         "Properties": {
            "SecurityGroupIngress": [
               {
                  "CidrIp": "0.0.0.0/0",
                  "IpProtocol": "tcp",
                  "FromPort": "3306",
                  "ToPort": "3306"
               }
            ],
            "GroupDescription": "Challenge RDS Security Group",
            "Tags": [
               {
                  "Key": "Name",
                  "Value": "Challenge RDS SG"
               }
            ]
         }
      },
      "ChallengeDB": {
         "Type": "AWS::RDS::DBInstance",
         "Properties": {
            "AllocatedStorage": "5",
            "DBInstanceClass": "db.t3.micro",
            "Engine": "MySQL",
            "DBName": "challengedb",
            "MasterUsername": "db_admin",
            "MasterUserPassword": {
               "Fn::GetAtt": [
                  "DBPassword",
                  "Secret"
               ]
            },
            "VPCSecurityGroups": [
               {
                  "Fn::GetAtt": [
                     "RDSSecurityGroup",
                     "GroupId"
                  ]
               }
            ]
         }
      },
      "ChallengeVpcResource": {
         "Type": "AWS::EC2::VPC",
         "Properties": {
            "CidrBlock": {
               "Fn::FindInMap": [
                  "Configuration",
                  "VpcCIDR",
                  "Value"
               ]
            },
            "InstanceTenancy": "default",
            "EnableDnsSupport": true,
            "EnableDnsHostnames": true,
            "Tags": [
               {
                  "Key": "Name",
                  "Value": "Challenge VPC"
               }
            ]
         }
      },
      "ChallengeSubnetResource": {
         "Type": "AWS::EC2::Subnet",
         "Properties": {
            "CidrBlock": {
               "Fn::FindInMap": [
                  "Configuration",
                  "SubnetCIDR",
                  "Value"
               ]
            },
            "AvailabilityZone": {
               "Fn::Select": [
                  "1",
                  {
                     "Fn::GetAZs": {
                        "Ref": "AWS::Region"
                     }
                  }
               ]
            },
            "VpcId": {
               "Ref": "ChallengeVpcResource"
            },
            "MapPublicIpOnLaunch": true,
            "Tags": [
               {
                  "Key": "Name",
                  "Value": "Challenge Subnet"
               }
            ]
         }
      },
      "ChallengeNACLResource": {
         "Type": "AWS::EC2::NetworkAcl",
         "Properties": {
            "VpcId": {
               "Ref": "ChallengeVpcResource"
            },
            "Tags": [
               {
                  "Key": "Name",
                  "Value": "Challenge NACL"
               }
            ]
         }
      },
      "ChallengeNACLResourceAssociation": {
         "Type": "AWS::EC2::SubnetNetworkAclAssociation",
         "Properties": {
            "NetworkAclId": {
               "Ref": "ChallengeNACLResource"
            },
            "SubnetId": {
               "Ref": "ChallengeSubnetResource"
            }
         }
      },
      "ChallengeRT": {
         "Type": "AWS::EC2::RouteTable",
         "Properties": {
            "VpcId": {
               "Ref": "ChallengeVpcResource"
            },
            "Tags": [
               {
                  "Key": "Name",
                  "Value": "Challenge Route Table"
               }
            ]
         }
      },
      "ChallengeRTAssociation": {
         "Type": "AWS::EC2::SubnetRouteTableAssociation",
         "Properties": {
            "RouteTableId": {
               "Ref": "ChallengeRT"
            },
            "SubnetId": {
               "Ref": "ChallengeSubnetResource"
            }
         }
      },
      "ChallengeSG": {
         "Type": "AWS::EC2::SecurityGroup",
         "Properties": {
            "GroupDescription": "Security group for Challenge",
            "VpcId": {
               "Ref": "ChallengeVpcResource"
            },
            "Tags": [
               {
                  "Key": "Name",
                  "Value": "Challenge-EC2-SG"
               }
            ]
         }
      },
      "ChallengeEIP": {
         "Type": "AWS::EC2::EIP",
         "Properties": {
            "Domain": {
               "Ref": "ChallengeVpcResource"
            }
         }
      },
      "ChallengeIGWResource": {
         "Type": "AWS::EC2::InternetGateway",
         "Properties": {
            "Tags": [
               {
                  "Key": "Name",
                  "Value": "Challenge IGW"
               }
            ]
         }
      },
      "ChallengeIGWAssociation": {
         "Type": "AWS::EC2::Route",
         "Properties": {
            "DestinationCidrBlock": "0.0.0.0/0",
            "RouteTableId": {
               "Ref": "ChallengeRT"
            },
            "GatewayId": {
               "Ref": "ChallengeIGWResource"
            }
         }
      },
      "ChallengeIGWAttachment": {
         "Type": "AWS::EC2::VPCGatewayAttachment",
         "Properties": {
            "VpcId": {
               "Ref": "ChallengeVpcResource"
            },
            "InternetGatewayId": {
               "Ref": "ChallengeIGWResource"
            }
         }
      },
      "ChallengeAclEntry2": {
         "Type": "AWS::EC2::NetworkAclEntry",
         "Properties": {
            "CidrBlock": "0.0.0.0/0",
            "Egress": true,
            "Protocol": -1,
            "RuleAction": "allow",
            "RuleNumber": 100,
            "NetworkAclId": {
               "Ref": "ChallengeNACLResource"
            }
         }
      },
      "ChallengeSGIngress3": {
         "Type": "AWS::EC2::SecurityGroupIngress",
         "Properties": {
            "GroupId": {
               "Ref": "ChallengeSG"
            },
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "CidrIp": "0.0.0.0/0"
         }
      },
      "ChallengeCFNEndpoint": {
         "Type": "AWS::EC2::VPCEndpoint",
         "Properties": {
            "VpcEndpointType": "Interface",
            "ServiceName": {
               "Fn::Join": [
                  "",
                  [
                     "com.amazonaws.",
                     {
                        "Ref": "AWS::Region"
                     },
                     ".cloudformation"
                  ]
               ]
            },
            "VpcId": {
               "Ref": "ChallengeVpcResource"
            },
            "SubnetIds": [
               {
                  "Ref": "ChallengeSubnetResource"
               }
            ],
            "SecurityGroupIds": [
               {
                  "Ref": "ChallengeSG"
               }
            ],
            "PrivateDnsEnabled": true
         }
      },
      "PrivateLinkChallengeSGIngress1": {
         "Type": "AWS::EC2::SecurityGroupIngress",
         "Properties": {
            "GroupId": {
               "Ref": "ChallengeSG"
            },
            "IpProtocol": "tcp",
            "FromPort": 443,
            "ToPort": 443,
            "CidrIp": "0.0.0.0/0"
         }
      },
      "PrivateLinkChallengeSGEgress1": {
         "Type": "AWS::EC2::SecurityGroupEgress",
         "Properties": {
            "GroupId": {
               "Ref": "ChallengeSG"
            },
            "IpProtocol": "tcp",
            "FromPort": 443,
            "ToPort": 443,
            "CidrIp": "0.0.0.0/0"
         }
      },
      "ChallengeMachine": {
         "Type": "AWS::EC2::Instance",
         "Properties": {
            "Tags": [
               {
                  "Key": "Name",
                  "Value": "Challenge EC2"
               }
            ],
            "ImageId": {
               "Fn::GetAtt": [
                  "AMIInfo",
                  "Id"
               ]
            },
            "InstanceType": "t3.micro",
            "KeyName": {
               "Fn::Sub": "${AWS::StackName}-challenge-key-pair"
            },
            "NetworkInterfaces": [
               {
                  "AssociatePublicIpAddress": false,
                  "DeviceIndex": "0",
                  "GroupSet": [
                     {
                        "Ref": "ChallengeSG"
                     }
                  ],
                  "SubnetId": {
                     "Ref": "ChallengeSubnetResource"
                  }
               }
            ],
            "UserData": {
               "Fn::Base64": {
                  "Fn::Join": [
                     "",
                     [
                        "<script>\n",
                        "cfn-init.exe -v -s ",
                        {
                           "Ref": "AWS::StackId"
                        },
                        " -r ChallengeMachine",
                        " --region ",
                        {
                           "Ref": "AWS::Region"
                        },
                        "\n",
                        "cfn-signal.exe -e %ERRORLEVEL% ",
                        "  --stack ",
                        {
                           "Ref": "AWS::StackId"
                        },
                        "  --resource ChallengeMachine",
                        "  --region ",
                        {
                           "Ref": "AWS::Region"
                        },
                        "\n",
                        "</script>"
                     ]
                  ]
               }
            }
         },
         "DependsOn": "KeyPair",
         "Metadata": {
            "AWS::CloudFormation::Init": {
               "config": {
                  "files": {
                     "C:\\CyberArk-Challenge\\PieceOfCandy.txt": {
                        "content": {
                           "Fn::Join": [
                              "",
                              [
                                 "Congratulations for solving the last piece of the challenge!\n",
                                 "Your secret is: ",
                                 {
                                    "Fn::GetAtt": [
                                       "EC2Secret",
                                       "Secret"
                                    ]
                                 }
                              ]
                           ]
                        }
                     }
                  },
                  "commands": {
                     "99-SignalCompletion": {
                        "command": {
                           "Fn::Join": [
                              "",
                              [
                                 "cfn-signal.exe -e %ERRORLEVEL% ",
                                 "         --stack ",
                                 {
                                    "Ref": "AWS::StackId"
                                 },
                                 "         --resource PSMMachine ",
                                 "         --region ",
                                 {
                                    "Ref": "AWS::Region"
                                 }
                              ]
                           ]
                        }
                     }
                  }
               }
            }
         }
      }
   },
   "Parameters": {
      "UserID": {
         "Type": "String",
         "Description": "Enter a user identifier."
      },
      "ApiHost": {
         "Type": "String",
         "Description": "Enter a user identifier."
      },
      "ApiToken": {
         "Type": "String",
         "Description": "Enter the API Token used to authenticate to the API"
      }
   },
   "Mappings": {
      "Configuration": {
         "CentralBucketName": {
            "Value": "awschallenge-resources-bucket"
         },
         "VpcCIDR": {
            "Value": "15.0.0.0/16"
         },
         "SubnetCIDR": {
            "Value": "15.0.0.0/24"
         }
      }
   },
   "Metadata": {
      "AWS::CloudFormation::Interface": {
         "ParameterGroups": [
            {
               "Label": {
                  "default": "General parameters"
               },
               "Parameters": [
                  "UserID"
               ]
            }
         ],
         "ParameterLabels": {
            "UserID": {
               "default": "User ID"
            }
         }
      }
   }
}
